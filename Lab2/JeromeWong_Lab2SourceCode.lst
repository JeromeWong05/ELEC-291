0000              1   ; ISR_example.asm: a) Increments/decrements a BCD variable every half second using
0000              2   ; an ISR for timer 2; b) Generates a 2kHz square wave at pin P1.7 using
0000              3   ; an ISR for timer 0; and c) in the 'main' loop it displays the variable
0000              4   ; incremented/decremented using the ISR for timer 2 on the LCD.  Also resets it to 
0000              5   ; zero if the 'CLEAR' push button connected to P1.5 is pressed.
                  7   $LIST
0000              9   
0000             10   ;  N76E003 pinout:
0000             11   ;                               -------
0000             12   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             13   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             14   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             15   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             16   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             17   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             18   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             19   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             20   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             21   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             22   ;                               -------
0000             23   ;
0000             24   
0000             25   ;---------------------------------;
0000             26   ;          Constants                
0000             27   ;---------------------------------;
0000             28   
0000             29   CLK           EQU 16600000 ; Microcontroller system frequency in Hz
0000             30   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             31   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             32   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             33   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             34   
0000             35   ;---------------------------------;
0000             36   ;        Pin Assignment                
0000             37   ;---------------------------------;
0000             38   
0000             39   hour_button equ P0.5
0000             40   minute_button equ P3.0
0000             41   AMPM_button equ P1.7
0000             42   alarm_button equ P1.6
0000             43   alarm_clock_button equ P1.5
0000             44   sound_out equ P1.2
0000             45   
0000             46   
0000             47   ;---------------------------------;
0000             48   ;        Interrupt memory            
0000             49   ;---------------------------------;
0000             50   
0000             51   ; Reset vector
0000             52   org 0x0000
0000 0201C2      53       ljmp main
0003             54   
0003             55   ; External interrupt 0 vector (not used in this code)
0003             56   org 0x0003
0003 32          57            reti
0004             58   
0004             59   ; Timer/Counter 0 overflow interrupt vector
000B             60   org 0x000B
000B 0200F8      61            ljmp Timer0_ISR
000E             62   
000E             63   ; External interrupt 1 vector (not used in this code)
0013             64   org 0x0013
0013 32          65            reti
0014             66   
0014             67   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             68   org 0x001B
001B 32          69            reti
001C             70   
001C             71   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             72   org 0x0023 
0023 32          73            reti
0024             74            
0024             75   ; Timer/Counter 2 overflow interrupt vector
002B             76   org 0x002B
002B 020122      77            ljmp Timer2_ISR
002E             78   
002E             79   ;---------------------------------;
002E             80   ;     Direct Access Variables
002E             81   ;---------------------------------;
002E             82   
002E             83   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             84   dseg at 0x30
0030             85   Count1ms: ds 2 ; ms Counter 
0032             86   current_sec: ds 1
0033             87   current_min: ds 1
0034             88   current_hour: ds 1
0035             89   current_ampm: ds 1
0036             90   
0036             91   alarm_min: ds 1
0037             92   alarm_hour: ds 1
0038             93   alarm_ampm: ds 1
0039             94   
0039             95   alarm_onoff: ds 1
003A             96   alarm_ring: ds 1
003B             97   mode: ds 1
003C             98   
003C             99   ; In the 8051 we have variables that are 1-bit in size.  We can use the setb, clr, jb, and jnb
003C            100   ; instructions with these variables.  This is how you define a 1-bit variable:
0000            101   bseg
0000            102   second_flag: dbit 1
0001            103   
0001            104   
002E            105   cseg
002E            106   
002E            107   ; These 'equ' must match the hardware wiring
002E            108   LCD_RS equ P1.3
002E            109   ;LCD_RW equ PX.X ; Not used in this code, connect the pin to GND
002E            110   LCD_E  equ P1.4
002E            111   LCD_D4 equ P0.0
002E            112   LCD_D5 equ P0.1
002E            113   LCD_D6 equ P0.2
002E            114   LCD_D7 equ P0.3
002E            115   
                117   	$LIST
00E2            119   
00E2            120   ;---------------------------------;
00E2            121   ;           Timer 0 Init
00E2            122   ;---------------------------------;
00E2            123   Timer0_Init:
00E2 438E08     124            orl CKCON, #0b00001000 ; Input for timer 0 is sysclk/1
00E5 E589       125            mov a, TMOD
00E7 54F0       126            anl a, #0xf0 ; 11110000 Clear the bits for timer 0
00E9 4401       127            orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
00EB F589       128            mov TMOD, a
00ED 758CF0     129            mov TH0, #high(TIMER0_RELOAD)
00F0 758A2C     130            mov TL0, #low(TIMER0_RELOAD)
00F3            131            ; Enable the timer and interrupts
00F3 D2A9       132       setb ET0  ; Enable timer 0 interrupt
00F5 C28C       133       clr TR0
00F7 22         134            ret
00F8            135   
00F8            136   ;---------------------------------;
00F8            137   ;          Timer 0 ISR
00F8            138   ;---------------------------------;
00F8            139   Timer0_ISR:
00F8            140            ;clr TF0  ; According to the data sheet this is done for us already.
00F8            141            ; Timer 0 doesn't have 16-bit auto-reload, so
00F8 C28C       142            clr TR0
00FA 758CF0     143            mov TH0, #high(TIMER0_RELOAD)
00FD 758A2C     144            mov TL0, #low(TIMER0_RELOAD)
0100 D28C       145            setb TR0
0102 B292       146            cpl sound_out ; Connect speaker the pin assigned to 'sound_out'!
0104 32         147            reti
0105            148   
0105            149   ;---------------------------------;
0105            150   ;          Timer 2 Init 
0105            151   ;---------------------------------;
0105            152   Timer2_Init:
0105 75C800     153            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
0108 75CDBF     154            mov TH2, #high(TIMER2_RELOAD)
010B 75CC28     155            mov TL2, #low(TIMER2_RELOAD)
010E            156            ; Set the reload value
010E 43C980     157            orl T2MOD, #0x80 ; Enable timer 2 autoreload
0111 75CBBF     158            mov RCMP2H, #high(TIMER2_RELOAD)
0114 75CA28     159            mov RCMP2L, #low(TIMER2_RELOAD)
0117            160   
0117            161            ; Init One millisecond interrupt counter.  It is a 16-bit variable made with two 8-bit parts
0117 E4         162            clr a
0118 F530       163            mov Count1ms+0, a
011A F531       164            mov Count1ms+1, a
011C            165   
011C            166            ; Enable the timer and interrupts
011C 439B80     167            orl EIE, #0x80 ; Enable timer 2 interrupt ET2=1
011F D2CA       168       setb TR2  ; Enable timer 2
0121 22         169            ret
0122            170   
0122            171   ;---------------------------------;
0122            172   ;          Timer 2 ISR
0122            173   ;---------------------------------;
0122            174   Timer2_ISR:
0122 C2CF       175            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in the ISR.  It is bit addressable.
0124            176            
0124            177            ; The two registers used in the ISR must be saved in the stack
0124 C0E0       178            push acc
0126 C0D0       179            push psw
0128            180            
0128            181            ; Increment the 16-bit one mili second counter
0128 0530       182            inc Count1ms+0    ; Increment the low 8-bits first
012A E530       183            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
012C 7002       184            jnz Inc_Done
012E 0531       185            inc Count1ms+1
0130            186   
0130            187   Inc_Done:
0130            188            ; Check if 1000ms is reached 
0130 E530       189            mov a, Count1ms+0
0132 B4E818     190            cjne a, #low(1000), Timer2_ISR_done 
0135 E531       191            mov a, Count1ms+1
0137 B40313     192            cjne a, #high(1000), Timer2_ISR_done 
013A            193            
013A            194       ; let the main program know a second has passed 
013A D200       195       setb second_flag 
013C            196       ; when one second has passed
013C B28C       197       cpl TR0 
013E E4         198       clr a 
013F F530       199       mov Count1ms+0, a 
0141 F531       200       mov Count1ms+1, a 
0143 120152     201       lcall increment_clock ; increment the clock
0146            202   
0146            203       ; check if the alarm time matches and alarm is on => if matched enable Timer0 if not already
0146 E539       204       mov a, alarm_onoff 
0148 6003       205       jz Timer2_ISR_done
014A 1201A1     206       lcall check_alarm_match
014D            207   
014D            208   Timer2_ISR_done:
014D D0D0       209            pop psw
014F D0E0       210            pop acc
0151 32         211            reti
0152            212   
0152            213   ;---------------------------------;
0152            214   ;        Increment Clock
0152            215   ;---------------------------------;
0152            216   increment_clock: 
0152 C0E0       217       push acc 
0154 C0D0       218       push psw
0156            219   
0156            220       ; increment second
0156 E532       221       mov a, current_sec
0158 2401       222       add a, #1
015A B43C29     223       cjne a, #60, NoWrapSec
015D E4         224       clr a 
015E D4         225       da a 
015F F532       226       mov current_sec, a 
0161            227   
0161            228       ; increment minute
0161 E533       229       mov a, current_min
0163 2401       230       add a, #1
0165 B43C21     231       cjne a, #60, NoWrapMin
0168 E4         232       clr a 
0169 D4         233       da a
016A F533       234       mov current_min, a 
016C            235   
016C            236       ; increment hour
016C E534       237       mov a, current_hour
016E 2401       238       add a, #1
0170 B40D07     239       cjne a, #13, NoAMPMToggle
0173 7401       240       mov a, #1 
0175 120193     241       lcall Toggle_AMPM_Clock
0178 8007       242       sjmp HoursGood
017A            243   
017A            244   NoAMPMToggle: 
017A B40C04     245       cjne a, #12, HoursGood
017D E4         246       clr a
017E 120193     247       lcall Toggle_AMPM_Clock
0181            248   
0181            249   HoursGood:
0181 D4         250       da a 
0182 F534       251       mov current_hour, a 
0184 8008       252       sjmp clockdone
0186            253   
0186            254   NoWrapSec: 
0186 D4         255       da a 
0187 F532       256       mov current_sec, a 
0189            257   
0189            258   NoWrapMin: 
0189 D4         259       da a
018A F533       260       mov current_min, a 
018C 8000       261       sjmp clockdone 
018E            262   
018E            263   clockdone: 
018E D0D0       264       pop psw 
0190 D0E0       265       pop acc 
0192 22         266       ret 
0193            267   
0193            268   ;---------------------------------;
0193            269   ;        Toggle AMPM
0193            270   ;---------------------------------;
0193            271   Toggle_AMPM_Clock:
0193 E535       272       mov a, current_ampm
0195 B2E0       273       cpl acc.0
0197 F535       274       mov current_ampm, a 
0199 22         275       ret 
019A            276   
019A            277   Toggle_AMPM_Alarm: 
019A E538       278       mov a, alarm_ampm 
019C B2E0       279       cpl acc.0
019E F538       280       mov alarm_ampm, A
01A0 22         281       ret 
01A1            282   
01A1            283   check_alarm_match: 
01A1 C0E0       284       push acc 
01A3 C0D0       285       push psw
01A5            286   
01A5            287       ; check hour
01A5 E534       288       mov a, current_hour
01A7 B53713     289       cjne a, alarm_hour, alarm_check_done
01AA            290   
01AA            291       ; check minute
01AA E533       292       mov a, current_min 
01AC B5360E     293       cjne a, alarm_min, alarm_check_done
01AF            294   
01AF            295       ; compare am/pm
01AF E535       296       mov a, current_ampm
01B1 B53809     297       cjne a, alarm_ampm, alarm_check_done
01B4            298   
01B4 E53A       299       mov a, alarm_ring
01B6 7005       300       jnz alarm_check_done
01B8 753A01     301       mov alarm_ring, #1
01BB D28C       302       setb TR0 
01BD            303   
01BD            304   alarm_check_done: 
01BD D0D0       305       pop psw 
01BF D0E0       306       pop acc 
01C1 22         307       ret 
01C2            308   
01C2            309   
01C2            310   ;---------------------------------;
01C2            311   ;          Main Program
01C2            312   ;---------------------------------;
01C2            313   main:
01C2            314            ; Initialization
01C2 75817F     315       mov SP, #0x7F
01C5 75B100     316       mov P0M1, #0x00
01C8 75B200     317       mov P0M2, #0x00
01CB 75B300     318       mov P1M1, #0x00
01CE 75B400     319       mov P1M2, #0x00
01D1 75AD00     320       mov P3M2, #0x00
01D4 75AD00     321       mov P3M2, #0x00
01D7            322   
01D7 1200E2     323       lcall Timer0_Init
01DA 120105     324       lcall Timer2_Init
01DD D2AF       325       setb EA   ; Enable Global interrupts
01DF 120087     326       lcall LCD_4BIT
01E2            327       
01E2 C0E0       328            push acc
01E4 7401       328            mov a, #1
01E6 14         328            dec a
01E7 1200C7     328            lcall ?Set_Cursor_1 ; Select column and row
01EA D0E0       328            pop acc
01EC            328   
01EC C083       329            push dph
01EE C082       329            push dpl
01F0 C0E0       329            push acc
01F2 90037D     329            mov dptr, #TimeMessage
01F5 1200BA     329            lcall ?Send_Constant_String
01F8 D0E0       329            pop acc
01FA D082       329            pop dpl
01FC D083       329            pop dph
01FE C0E0       330            push acc
0200 7401       330            mov a, #1
0202 14         330            dec a
0203 1200C5     330            lcall ?Set_Cursor_2 ; Select column and row
0206 D0E0       330            pop acc
0208            330   
0208 C083       331            push dph
020A C082       331            push dpl
020C C0E0       331            push acc
020E 90038C     331            mov dptr, #AlarmMessage
0211 1200BA     331            lcall ?Send_Constant_String
0214 D0E0       331            pop acc
0216 D082       331            pop dpl
0218 D083       331            pop dph
021A            332   
021A            333       ; initialize all the time values
021A 7400       334       mov a, #0x00
021C D4         335       da a
021D F532       336       mov current_sec, a
021F F533       337       mov current_min, a
0221 F534       338       mov current_hour, a ; set to 12:00:00 A
0223 753500     339       mov current_ampm, #0x00 ; 0 = AM, 1 = PM
0226            340   
0226 753600     341       mov alarm_min, #0x00
0229 753706     342       mov alarm_hour, #0x06
022C 753900     343       mov alarm_onoff, #0x00 ; 0 = off, 1 = on
022F 753800     344       mov alarm_ampm, #0x00 ; 0 = AM, 1 = PM
0232 753A00     345       mov alarm_ring, #0x00
0235 753B00     346       mov mode, #0x00  ; 0 = adjust clock, 1 = adjust alarm
0238            347   
0238            348   
0238            349   ;---------------------------------;
0238            350   ;          Main Loop
0238            351   ;---------------------------------;
0238            352   Mainloop: 
0238            353   
0238 200002     354       jb second_flag, DoUpdateDisplay
023B 8007       355       sjmp SkipUpdate
023D            356   
023D            357   DoUpdateDisplay: 
023D 120361     358       lcall UpdateDisplay
0240 C200       359       clr second_flag
0242 800F       360       sjmp LoopDone 
0244            361   
0244            362   SkipUpdate: 
0244            363   
0244            364       ; check for alarm button
0244 209515     365       jb alarm_clock_button, CheckHourButton
0247 C002       366            push AR2
0249 7A32       366            mov R2, #50
024B 120038     366            lcall ?Wait_Milli_Seconds
024E D002       366            pop AR2
0250 209509     367       jb alarm_clock_button, CheckHourButton
0253            368       ;jnb alarm_clock_button, $
0253            369   
0253            370   LoopDone: 
0253 E53B       371       mov a, mode 
0255 B2E0       372       cpl acc.0
0257 F53B       373       mov mode, a 
0259 020238     374       ljmp Mainloop
025C            375   
025C            376   ;---------------------------------;
025C            377   ;      Checking Hour Button
025C            378   ;---------------------------------;
025C            379   CheckHourButton: 
025C 208520     380       jb hour_button, CheckMinuteButton
025F C002       381            push AR2
0261 7A32       381            mov R2, #50
0263 120038     381            lcall ?Wait_Milli_Seconds
0266 D002       381            pop AR2
0268 208514     382       jb hour_button, CheckMinuteButton
026B 3085FD     383       jnb hour_button, $
026E            384   
026E            385       ; see if we are changing the alarm or clock hour
026E E53B       386       mov a, mode
0270 20E006     387       jb acc.0, SetAlarmHour 
0273            388   
0273            389   SetHourClock: 
0273 120343     390       lcall Inc_Hour_Clock
0276 020361     391       ljmp UpdateDisplay
0279            392   
0279            393   SetAlarmHour: 
0279 120307     394       lcall Inc_Hour_Alarm
027C 020361     395       ljmp UpdateDisplay
027F            396   
027F            397   
027F            398   ;---------------------------------;
027F            399   ;     Checking Minute Button
027F            400   ;---------------------------------;
027F            401   CheckMinuteButton: 
027F 20B020     402       jb minute_button, Check_AMPM_Button
0282 C002       403            push AR2
0284 7A32       403            mov R2, #50
0286 120038     403            lcall ?Wait_Milli_Seconds
0289 D002       403            pop AR2
028B 20B014     404       jb minute_button, Check_AMPM_Button
028E 30B0FD     405       jnb minute_button, $
0291            406   
0291            407       ; again we see if we are changing the alarm or clock minute
0291 E53B       408       mov a, mode 
0293 20E006     409       jb acc.0, SetMinuteAlarm
0296            410   
0296            411   SetMinuteClock: 
0296 120325     412       lcall Inc_Minute_Clock
0299 020361     413       ljmp UpdateDisplay
029C            414   
029C            415   SetMinuteAlarm: 
029C 1202E9     416       lcall Inc_Minute_Alarm
029F 020361     417       ljmp UpdateDisplay
02A2            418   
02A2            419   
02A2            420   ;---------------------------------;
02A2            421   ;     Checking AMPM Button
02A2            422   ;---------------------------------;
02A2            423   Check_AMPM_Button: 
02A2 209720     424       jb AMPM_button, CheckAlarmOnOff
02A5 C002       425            push AR2
02A7 7A32       425            mov R2, #50
02A9 120038     425            lcall ?Wait_Milli_Seconds
02AC D002       425            pop AR2
02AE 209714     426       jb AMPM_button, CheckAlarmOnOff
02B1 3097FD     427       jnb AMPM_button, $
02B4            428   
02B4            429       ; check if it is the alarm or clock AM/PM
02B4 E53B       430       mov a, mode 
02B6 20E006     431       jb acc.0, SetAMPMAlarm
02B9            432   
02B9            433   SetAMPMClock: 
02B9 120193     434       lcall Toggle_AMPM_Clock
02BC 020361     435       ljmp UpdateDisplay
02BF            436   
02BF            437   SetAMPMAlarm: 
02BF 12019A     438       lcall Toggle_AMPM_Alarm
02C2 020361     439       ljmp UpdateDisplay 
02C5            440   
02C5            441   
02C5            442   ;---------------------------------;
02C5            443   ;     Checking Alarm OnOff
02C5            444   ;---------------------------------;
02C5            445   CheckAlarmOnOff: 
02C5 20951E     446       jb alarm_clock_button, JumpBooster 
02C8 C002       447            push AR2
02CA 7A32       447            mov R2, #50
02CC 120038     447            lcall ?Wait_Milli_Seconds
02CF D002       447            pop AR2
02D1 209512     448       jb alarm_clock_button, JumpBooster
02D4 3095FD     449       jnb alarm_clock_button, $
02D7            450   
02D7 E539       451       mov a, alarm_onoff
02D9 B2E0       452       cpl acc.0
02DB F539       453       mov alarm_onoff, a 
02DD            454   
02DD E539       455       mov a, alarm_onoff
02DF 7005       456       jnz JumpBooster
02E1 753A00     457       mov alarm_ring, #0
02E4 C28C       458       clr TR0 
02E6            459   
02E6            460   JumpBooster: 
02E6 020361     461       ljmp UpdateDisplay
02E9            462   
02E9            463   Inc_Minute_Alarm: 
02E9 C0E0       464       push acc 
02EB C0D0       465       push psw 
02ED            466   
02ED E536       467       mov a, alarm_min
02EF 2401       468       add a, #1
02F1 B43C0C     469       cjne a, #60, AMNot60
02F4 7400       470       mov a, #0
02F6 F536       471       mov alarm_min, a 
02F8            472   
02F8 120307     473       lcall Inc_Hour_Alarm 
02FB D0D0       474       pop psw 
02FD D0E0       475       pop acc 
02FF 22         476       ret 
0300            477   
0300            478   AMNot60: 
0300 F536       479       mov alarm_min, a 
0302 D0D0       480       pop psw 
0304 D0E0       481       pop acc
0306 22         482       ret 
0307            483   
0307            484   Inc_Hour_Alarm: 
0307 C0E0       485       push acc
0309 C0D0       486       push psw
030B            487   
030B E537       488       mov a, alarm_hour 
030D 2401       489       add a, #1 
030F B40D0C     490       cjne a, #13, AHNot13
0312 7400       491       mov a, #0 
0314 F537       492       mov alarm_hour, a 
0316            493   
0316 12019A     494       lcall Toggle_AMPM_Alarm
0319 D0D0       495       pop psw 
031B D0E0       496       pop acc 
031D 22         497       ret 
031E            498   AHNot13: 
031E F537       499       mov alarm_hour, a 
0320 D0D0       500       pop psw 
0322 D0E0       501       pop acc 
0324 22         502       ret 
0325            503   
0325            504   Inc_Minute_Clock: 
0325 C0E0       505       push acc 
0327 C0D0       506       push psw 
0329            507   
0329 E533       508       mov a, current_min
032B 2401       509       add a, #1
032D B43C0C     510       cjne a, #60, CMNot60 
0330 7400       511       mov a, #0
0332 F533       512       mov current_min, a 
0334            513   
0334 120343     514       lcall Inc_Hour_Clock 
0337 D0D0       515       pop psw 
0339 D0E0       516       pop acc
033B 22         517       ret    
033C            518   
033C            519   CMNot60: 
033C F533       520       mov current_min, a 
033E D0D0       521       pop psw 
0340 D0E0       522       pop acc 
0342 22         523       ret 
0343            524   
0343            525   Inc_Hour_Clock: 
0343 C0E0       526       push acc 
0345 C0D0       527       push psw 
0347            528   
0347 E534       529       mov a, current_hour 
0349 2401       530       add a, #1 
034B B40D0C     531       cjne a, #13, CHNot13 
034E 7401       532       mov a, #1 
0350 F534       533       mov current_hour, a 
0352            534   
0352 120193     535       lcall Toggle_AMPM_Clock
0355 D0D0       536       pop psw 
0357 D0E0       537       pop acc 
0359 22         538       ret 
035A            539   
035A            540   CHNot13: 
035A F534       541       mov current_hour, a 
035C D0D0       542       pop psw 
035E D0E0       543       pop acc 
0360 22         544       ret 
0361            545   
0361            546   
0361            547   ;---------------------------------;
0361            548   ;        Update Display 
0361            549   ;---------------------------------;
0361            550   UpdateDisplay: 
0361 C0E0       551       push acc 
0363 C0D0       552       push psw
0365            553   
0365            554       ; Display Clock Second
0365 C0E0       555            push acc
0367 740D       555            mov a, #13
0369 14         555            dec a
036A 1200C7     555            lcall ?Set_Cursor_1 ; Select column and row
036D D0E0       555            pop acc
036F            555   
036F C000       556            push ar0
0371 A832       556            mov r0, current_sec
0373 1200CC     556            lcall ?Display_BCD
0376 D000       556            pop ar0
0378            557   UpdateDone:
0378 D0D0       558       pop psw 
037A D0E0       559       pop acc
037C 22         560       ret 
037D            561   
037D            562   
037D            563   TimeMessage: 
037D 54696D65   564       db 'Time    :  :  ', 0
     20202020
     3A20203A
     202000
038C            565   AlarmMessage: 
038C 416C6172   566       db 'Alarm   :  ', 0
     6D202020
     3A202000
0398            567   AM: 
0398 4100       568       db 'A', 0
039A            569   PM: 
039A 5000       570       db 'P', 0
039C            571   ON:
039C 6F6E00     572       db 'on', 0
039F            573   OFF: 
039F 6F666600   574       db 'off', 0
03A3            575   END
