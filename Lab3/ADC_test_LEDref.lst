0000              1   ; 76E003 ADC test program: Reads channel 7 on P1.1, pin 14
0000              2   ; This version uses an LED as voltage reference connected to pin 6 (P1.7/AIN0)
0000              3   
                  5   $LIST
0000              7   
0000              8   ;  N76E003 pinout:
0000              9   ;                               -------
0000             10   ;       PWM2/IC6/T0/AIN4/P0.5 -|1    20|- P0.4/AIN5/STADC/PWM3/IC3
0000             11   ;               TXD/AIN3/P0.6 -|2    19|- P0.3/PWM5/IC5/AIN6
0000             12   ;               RXD/AIN2/P0.7 -|3    18|- P0.2/ICPCK/OCDCK/RXD_1/[SCL]
0000             13   ;                    RST/P2.0 -|4    17|- P0.1/PWM4/IC4/MISO
0000             14   ;        INT0/OSCIN/AIN1/P3.0 -|5    16|- P0.0/PWM3/IC3/MOSI/T1
0000             15   ;              INT1/AIN0/P1.7 -|6    15|- P1.0/PWM2/IC2/SPCLK
0000             16   ;                         GND -|7    14|- P1.1/PWM1/IC1/AIN7/CLO
0000             17   ;[SDA]/TXD_1/ICPDA/OCDDA/P1.6 -|8    13|- P1.2/PWM0/IC0
0000             18   ;                         VDD -|9    12|- P1.3/SCL/[STADC]
0000             19   ;            PWM5/IC7/SS/P1.5 -|10   11|- P1.4/SDA/FB/PWM1
0000             20   ;                               -------
0000             21   ;
0000             22   
0000             23   
0000             24   ;---------------------------------;
0000             25   ;      Clock Configurations
0000             26   ;---------------------------------;
0000             27   CLK               EQU 16600000 ; Microcontroller system frequency in Hz
0000             28   BAUD              EQU 115200 ; Baud rate of UART in bps
0000             29   TIMER1_RELOAD     EQU (0x100-(CLK/(16*BAUD)))
0000             30   TIMER0_RELOAD_1MS EQU (0x10000-(CLK/1000))
0000             31   TIMER0_RATE   EQU 4096     ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             32   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             33   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             34   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             35   
0000             36   sound_out equ P1.2 
0000             37   LED_out equ P1.7
0000             38   button_left equ P1.5
0000             39   button_right equ P1.6
0000             40   ;---------------------------------;
0000             41   ;        Interrupt Memory
0000             42   ;---------------------------------;
0000             43   ; Reset vector
0000             44   org 0x0000
0000 02042D      45       ljmp main
0003             46   
0003             47   ; External interrupt 0 vector (not used in this code)
0003             48   org 0x0003
0003 32          49            reti
0004             50   
0004             51   ; Timer/Counter 0 overflow interrupt vector
000B             52   org 0x000B
000B 32          53            reti 
000C             54   
000C             55   ; External interrupt 1 vector (not used in this code)
0013             56   org 0x0013
0013 32          57            reti
0014             58   
0014             59   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             60   org 0x001B
001B 32          61            reti
001C             62   
001C             63   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             64   org 0x0023 
0023 32          65            reti
0024             66            
0024             67   ; Timer/Counter 2 overflow interrupt vector
002B             68   org 0x002B
002B 0203C0      69            ljmp Timer2_ISR
002E             70   
002E             71   
002E             72   
002E             73   
002E             74   cseg
002E             75   ; These 'equ' must match the hardware wiring
002E             76   LCD_RS equ P1.3
002E             77   LCD_E  equ P1.4
002E             78   LCD_D4 equ P0.0
002E             79   LCD_D5 equ P0.1
002E             80   LCD_D6 equ P0.2
002E             81   LCD_D7 equ P0.3
002E             82   
                 84   	$LIST
00E2             86   
00E2             87   ; These register definitions needed by 'math32.inc'
0030             88   DSEG at 30H
0030             89   x:   ds 4
0034             90   y:   ds 4
0038             91   bcd: ds 5
003D             92   Count1ms: ds 2 
003F             93   ;VLED_ADC: ds 2
003F             94   ; average the reading variable 
003F             95   adc_sum: ds 4
0043             96   adc_avg: ds 2 
0045             97   adc_max: ds 2
0047             98   adc_min: ds 2
0049             99   
0049            100   
0000            101   BSEG
0000            102   mf: dbit 1
0001            103   leftmenu_flag: dbit 1
0002            104   rightmenu_flag: dbit 1 
0003            105   
                546   $LIST
                107   $LIST
0352            109   
0352            110   Init_All:
0352            111            ; Configure all the pins for biderectional I/O
0352 75AC00     112            mov     P3M1, #0x00
0355 75AD00     113            mov     P3M2, #0x00
0358 75B300     114            mov     P1M1, #0x00
035B 75B400     115            mov     P1M2, #0x00
035E 75B100     116            mov     P0M1, #0x00
0361 75B200     117            mov     P0M2, #0x00
0364            118   
0364 79C8       119            mov R1, #200
0366 7868       120            mov R0, #104
0368 D8FE       121            djnz R0, $
036A D9FA       122            djnz R1, $-4
036C            123            
036C 438E10     124            orl     CKCON, #0x10 ; CLK is the input for timer 1
036F 438780     125            orl     PCON, #0x80 ; Bit SMOD=1, double baud rate
0372 759852     126            mov     SCON, #0x52
0375 53C4DF     127            anl     T3CON, #0b11011111
0378 53890F     128            anl     TMOD, #0x0F ; Clear the configuration bits for timer 1
037B 438920     129            orl     TMOD, #0x20 ; Timer 1 Mode 2
037E 758DF7     130            mov     TH1, #TIMER1_RELOAD ; TH1=TIMER1_RELOAD;
0381 D28E       131            setb TR1
0383            132            
0383            133            ; Using timer 0 for delay functions.  Initialize here:
0383 C28C       134            clr     TR0 ; Stop timer 0
0385 438E08     135            orl     CKCON,#0x08 ; CLK is the input for timer 0
0388 5389F0     136            anl     TMOD,#0xF0 ; Clear the configuration bits for timer 0
038B 438901     137            orl     TMOD,#0x01 ; Timer 0 in Mode 1: 16-bit timer
038E            138            
038E            139            ; Initialize the pins used by the ADC (P1.1, P1.7) as input.
038E 43B382     140            orl     P1M1, #0b10000010
0391 53B47D     141            anl     P1M2, #0b01111101
0394            142            
0394            143            ; Initialize and start the ADC:
0394 53E8F0     144            anl ADCCON0, #0xF0
0397 43E807     145            orl ADCCON0, #0x07 ; Select channel 7
039A            146            ; AINDIDS select if some pins are analog inputs or digital I/O:
039A 75F600     147            mov AINDIDS, #0x00 ; Disable all analog inputs
039D 43F680     148            orl AINDIDS, #0b10000000 ; Activate AIN0 and AIN7 analog inputs
03A0 43E101     149            orl ADCCON1, #0x01 ; Enable ADC
03A3            150            
03A3            151            ; set LED to push pull mode 
03A3 53B37F     152            anl P1M1, #0b01111111 
03A6 43B480     153            orl P1M2, #0b10000000 
03A9 C297       154            clr LED_out 
03AB            155   
03AB 22         156            ret
03AC            157   
03AC            158   ;---------------------------------;
03AC            159   ; Routine to initialize the ISR   ;
03AC            160   ; for timer 2                     ;
03AC            161   ;---------------------------------;
03AC            162   Timer2_Init:
03AC 438E08     163            orl CKCON, #0b00001000 ; Input for timer 0 is sysclk/1
03AF E5C8       164            mov a, T2CON 
03B1 E4         165            clr a 
03B2 4400       166            orl a, #0x00 
03B4            167            ;anl a, #0xf0 ; 11110000 Clear the bits for timer 0
03B4            168            ;orl a, #0x01 ; 00000001 Configure timer 0 as 16-timer
03B4 F5C8       169            mov T2CON, a
03B6 75CDF0     170            mov TH2, #high(TIMER0_RELOAD)
03B9 75CC2C     171            mov TL2, #low(TIMER0_RELOAD)
03BC            172            ; Enable the timer and interrupts
03BC            173   
03BC 439B80     174       orl EIE, #0x80
03BF 22         175            ret
03C0            176   
03C0            177   ;---------------------------------;
03C0            178   ; ISR for timer 2.  Set to execute;
03C0            179   ; every 1/4096Hz to generate a    ;
03C0            180   ; 2048 Hz wave at pin SOUND_OUT   ;
03C0            181   ;---------------------------------;
03C0            182   Timer2_ISR:
03C0            183            ;clr TF0  ; According to the data sheet this is done for us already.
03C0            184            ; Timer 0 doesn't have 16-bit auto-reload, so
03C0 C2CA       185            clr TR2
03C2 75CDF0     186            mov TH2, #high(TIMER0_RELOAD)
03C5 75CC2C     187            mov TL2, #low(TIMER0_RELOAD)
03C8            188   
03C8 D2CA       189       setb TR2 
03CA B292       190       cpl sound_out 
03CC            191   
03CC 32         192       reti 
03CD            193   
03CD            194   wait_1ms:
03CD C28C       195            clr TR0 ; Stop timer 0
03CF C28D       196            clr TF0 ; Clear overflow flag
03D1 758CBF     197            mov TH0, #high(TIMER0_RELOAD_1MS)
03D4 758A28     198            mov TL0,#low(TIMER0_RELOAD_1MS)
03D7 D28C       199            setb TR0
03D9 308DFD     200            jnb TF0, $ ; Wait for overflow
03DC 22         201            ret
03DD            202   
03DD            203   ; Wait the number of miliseconds in R2
03DD            204   waitms:
03DD 1203CD     205            lcall wait_1ms
03E0 DAFB       206            djnz R2, waitms
03E2 22         207            ret
03E3            208   
03E3            209   ; We can display a number any way we want.  In this case with
03E3            210   ; four decimal places.
03E3            211   Display_formated_BCD_temperature:
03E3 C000       212            push ar0
03E5 A83A       212            mov r0, bcd+2
03E7 1200CC     212            lcall ?Display_BCD
03EA D000       212            pop ar0
03EC C0E0       213            push acc
03EE 742E       213            mov a, #'.'
03F0 12007D     213            lcall ?WriteData
03F3 D0E0       213            pop acc
03F5 C000       214            push ar0
03F7 A839       214            mov r0, bcd+1
03F9 1200CC     214            lcall ?Display_BCD
03FC D000       214            pop ar0
03FE 22         215            ret
03FF            216   
03FF            217   putchar:
03FF 3099FD     218       jnb TI, putchar
0402 C299       219       clr TI
0404 F599       220       mov SBUF, a
0406 22         221       ret
0407            222   
0407            223   ; Send a constant-zero-terminated string using the serial port
0407            224   SendString:
0407 E4         225       clr A
0408 93         226       movc A, @A+DPTR
0409 6006       227       jz SendStringDone
040B 1203FF     228       lcall putchar
040E A3         229       inc DPTR
040F 80F6       230       sjmp SendString
0411            231   SendStringDone:
0411 22         232       ret
0412            233   
0412            234   
0412            235   Read_ADC:
0412 C2EF       236            clr ADCF
0414 D2EE       237            setb ADCS ;  ADC start trigger signal
0416 30EFFD     238       jnb ADCF, $ ; Wait for conversion complete
0419            239       
0419            240       ; Read the ADC result and store in [R1, R0]
0419 E5C2       241       mov a, ADCRL
041B 540F       242       anl a, #0x0f
041D F8         243       mov R0, a
041E E5C3       244       mov a, ADCRH   
0420 C4         245       swap a
0421 C0E0       246       push acc
0423 540F       247       anl a, #0x0f
0425 F9         248       mov R1, a
0426 D0E0       249       pop acc
0428 54F0       250       anl a, #0xf0
042A 48         251       orl a, R0
042B F8         252       mov R0, A
042C 22         253            ret
042D            254   
042D            255   main:
042D 75817F     256            mov sp, #0x7f
0430 120352     257            lcall Init_All
0433 1203AC     258            lcall Timer2_Init
0436 120087     259       lcall LCD_4BIT
0439            260   
0439            261            ; initialize variables 
0439 753C00     262            mov bcd+4, #0
043C 753B00     263            mov bcd+3, #0
043F 753A00     264            mov bcd+2, #0
0442 753900     265            mov bcd+1, #0
0445 753800     266            mov bcd+0, #0
0448            267   
0448 754500     268            mov adc_max+0, #0x00
044B 754600     269            mov adc_max+1, #0x00
044E            270   
044E 754799     271            mov adc_min+0, #0x99
0451 754899     272            mov adc_min+1, #0x99
0454            273   
0454            274            ; clear all the flags
0454 C201       275            clr leftmenu_flag
0456 C202       276            clr rightmenu_flag 
0458            277            
0458            278   
0458            279   Initial_Menu: 
0458 C0E0       280            push acc
045A 7401       280            mov a, #1
045C 14         280            dec a
045D 1200C7     280            lcall ?Set_Cursor_1 ; Select column and row
0460 D0E0       280            pop acc
0462 C083       281            push dph
0464 C082       281            push dpl
0466 C0E0       281            push acc
0468 90071D     281            mov dptr, #HomePage1
046B 1200BA     281            lcall ?Send_Constant_String
046E D0E0       281            pop acc
0470 D082       281            pop dpl
0472 D083       281            pop dph 
0474 C0E0       282            push acc
0476 7405       282            mov a, #5
0478 14         282            dec a
0479 1200C5     282            lcall ?Set_Cursor_2 ; Select column and row
047C D0E0       282            pop acc
047E C083       283            push dph
0480 C082       283            push dpl
0482 C0E0       283            push acc
0484 90072E     283            mov dptr, #HomePage2
0487 1200BA     283            lcall ?Send_Constant_String
048A D0E0       283            pop acc
048C D082       283            pop dpl
048E D083       283            pop dph 
0490 C0E0       284            push acc
0492 7401       284            mov a, #1
0494 14         284            dec a
0495 1200C5     284            lcall ?Set_Cursor_2 ; Select column and row
0498 D0E0       284            pop acc
049A C083       285            push dph
049C C082       285            push dpl
049E C0E0       285            push acc
04A0 90074B     285            mov dptr, #leftarrow
04A3 1200BA     285            lcall ?Send_Constant_String
04A6 D0E0       285            pop acc
04A8 D082       285            pop dpl
04AA D083       285            pop dph
04AC C0E0       286            push acc
04AE 740F       286            mov a, #15
04B0 14         286            dec a
04B1 1200C5     286            lcall ?Set_Cursor_2 ; Select column and row
04B4 D0E0       286            pop acc
04B6 C083       287            push dph
04B8 C082       287            push dpl
04BA C0E0       287            push acc
04BC 90074E     287            mov dptr, #rightarrow
04BF 1200BA     287            lcall ?Send_Constant_String
04C2 D0E0       287            pop acc
04C4 D082       287            pop dpl
04C6 D083       287            pop dph
04C8 020575     288            ljmp Main_loop
04CB            289   
04CB            290   LeftMenu: 
04CB C0E0       291            push acc
04CD 7401       291            mov a, #1
04CF 14         291            dec a
04D0 1200C7     291            lcall ?Set_Cursor_1 ; Select column and row
04D3 D0E0       291            pop acc
04D5 C083       292            push dph
04D7 C082       292            push dpl
04D9 C0E0       292            push acc
04DB 900737     292            mov dptr, #Temperature
04DE 1200BA     292            lcall ?Send_Constant_String
04E1 D0E0       292            pop acc
04E3 D082       292            pop dpl
04E5 D083       292            pop dph
04E7 C0E0       293            push acc
04E9 7401       293            mov a, #1
04EB 14         293            dec a
04EC 1200C5     293            lcall ?Set_Cursor_2 ; Select column and row
04EF D0E0       293            pop acc
04F1            293   
04F1 C083       294            push dph
04F3 C082       294            push dpl
04F5 C0E0       294            push acc
04F7 900751     294            mov dptr, #Empty
04FA 1200BA     294            lcall ?Send_Constant_String
04FD D0E0       294            pop acc
04FF D082       294            pop dpl
0501 D083       294            pop dph
0503            295   
0503 22         296            ret 
0504            297   
0504            298   
0504            299   RightMenu: 
0504 C0E0       300            push acc
0506 7401       300            mov a, #1
0508 14         300            dec a
0509 1200C7     300            lcall ?Set_Cursor_1 ; Select column and row
050C D0E0       300            pop acc
050E C083       301            push dph
0510 C082       301            push dpl
0512 C0E0       301            push acc
0514 900751     301            mov dptr, #Empty
0517 1200BA     301            lcall ?Send_Constant_String
051A D0E0       301            pop acc
051C D082       301            pop dpl
051E D083       301            pop dph
0520 C0E0       302            push acc
0522 7401       302            mov a, #1
0524 14         302            dec a
0525 1200C5     302            lcall ?Set_Cursor_2 ; Select column and row
0528 D0E0       302            pop acc
052A C083       303            push dph
052C C082       303            push dpl
052E C0E0       303            push acc
0530 900751     303            mov dptr, #Empty
0533 1200BA     303            lcall ?Send_Constant_String
0536 D0E0       303            pop acc
0538 D082       303            pop dpl
053A D083       303            pop dph
053C C0E0       304            push acc
053E 7401       304            mov a, #1
0540 14         304            dec a
0541 1200C7     304            lcall ?Set_Cursor_1 ; Select column and row
0544 D0E0       304            pop acc
0546 C083       305            push dph
0548 C082       305            push dpl
054A C0E0       305            push acc
054C 900762     305            mov dptr, #Min
054F 1200BA     305            lcall ?Send_Constant_String
0552 D0E0       305            pop acc
0554 D082       305            pop dpl
0556 D083       305            pop dph
0558 C0E0       306            push acc
055A 7401       306            mov a, #1
055C 14         306            dec a
055D 1200C5     306            lcall ?Set_Cursor_2 ; Select column and row
0560 D0E0       306            pop acc
0562 C083       307            push dph
0564 C082       307            push dpl
0566 C0E0       307            push acc
0568 900768     307            mov dptr, #Max
056B 1200BA     307            lcall ?Send_Constant_String
056E D0E0       307            pop acc
0570 D082       307            pop dpl
0572 D083       307            pop dph
0574            308   
0574 22         309            ret 
0575            310   
0575            311   Main_loop: 
0575 7B0A       312            mov r3, #10 ; takes 250 samples
0577            313   
0577 753F00     314            mov adc_sum+0, #0
057A 754000     315            mov adc_sum+1, #0
057D 754100     316            mov adc_sum+2, #0
0580 754200     317            mov adc_sum+3, #0
0583 754400     318            mov adc_avg+1, #0
0586 754300     319            mov adc_avg+0, #0
0589            320   
0589            321   adc_loop:
0589            322   
0589            323            ; Read the signal connected to AIN7
0589 53E8F0     324            anl ADCCON0, #0xF0
058C 43E807     325            orl ADCCON0, #0x07 ; Select channel 7
058F 120412     326            lcall Read_ADC
0592            327   
0592            328   CheckLeftButton: 
0592 209512     329            jb button_left, CheckRightButton
0595 7A32       330            mov R2, #50
0597 1203DD     331            lcall waitms
059A 20950A     332            jb button_left, CheckRightButton
059D 3095FD     333            jnb button_left, $
05A0            334   
05A0 C202       335            clr rightmenu_flag
05A2 D201       336            setb leftmenu_flag
05A4 1204CB     337            lcall LeftMenu 
05A7            338   
05A7            339   CheckRightButton: 
05A7 20961E     340            jb button_right, Voltage_Convert
05AA 7A32       341            mov R2, #50
05AC 1203DD     342            lcall waitms 
05AF 209616     343            jb button_right, Voltage_Convert
05B2 3096FD     344            jnb button_right, $ 
05B5            345   
05B5 754500     346            mov adc_max+0, #0x00
05B8 754600     347            mov adc_max+1, #0x00
05BB            348   
05BB 754799     349            mov adc_min+0, #0x99
05BE 754899     350            mov adc_min+1, #0x99
05C1            351   
05C1 C201       352            clr leftmenu_flag
05C3 D202       353            setb rightmenu_flag 
05C5 120504     354            lcall RightMenu
05C8            355   
05C8            356   Voltage_Convert:
05C8            357   
05C8            358       ; Convert to voltage
05C8 8830       359            mov x+0, R0
05CA 8931       360            mov x+1, R1
05CC            361            ; Pad other bits with zero
05CC 753200     362            mov x+2, #0
05CF 753300     363            mov x+3, #0
05D2            364   
05D2 753450     365            mov y+0, #low (50000 % 0x10000) 
05D5 7535C3     365            mov y+1, #high(50000 % 0x10000) 
05D8 753600     365            mov y+2, #low (50000 / 0x10000) 
05DB 753700     365            mov y+3, #high(50000 / 0x10000) 
05DE 12025C     366            lcall mul32 
05E1            367   
05E1 7534FF     368            mov y+0, #low (4095 % 0x10000) 
05E4 75350F     368            mov y+1, #high(4095 % 0x10000) 
05E7 753600     368            mov y+2, #low (4095 / 0x10000) 
05EA 753700     368            mov y+3, #high(4095 / 0x10000) 
05ED 1202E9     369            lcall div32 
05F0            370   
05F0            371            ; now we add it to the average Vmeasured + Vsum = Vnewsum 
05F0 853F34     372            mov y+0, adc_sum+0
05F3 854035     373            mov y+1, adc_sum+1
05F6 854136     374            mov y+2, adc_sum+2
05F9 854237     375            mov y+3, adc_sum+3 
05FC            376   
05FC 1201A7     377            lcall add32 
05FF            378   
05FF            379            ; move the new sum back into adc_sum 
05FF 85303F     380            mov adc_sum+0, x+0 
0602 853140     381            mov adc_sum+1, x+1
0605 853241     382            mov adc_sum+2, x+2
0608 853342     383            mov adc_sum+3, x+3 
060B            384   
060B            385            ; wait for 2ms 
060B 7A02       386            mov r2, #2
060D 1203DD     387            lcall waitms
0610            388   
0610            389            ; continue the loop 100 times
0610 DB02       390            djnz r3, jumpboost
0612 8003       391            sjmp Calculate_average
0614            392   
0614            393   jumpboost: 
0614 020589     394            ljmp adc_loop 
0617            395   
0617            396   Calculate_average: 
0617            397            ; calculate the average 
0617 853F30     398            mov x+0, adc_sum+0
061A 854031     399            mov x+1, adc_sum+1
061D 854132     400            mov x+2, adc_sum+2
0620 854233     401            mov x+3, adc_sum+3
0623            402   
0623            403            ; x = adc_sum / 100
0623 75340A     404            mov y+0, #low (10 % 0x10000) 
0626 753500     404            mov y+1, #high(10 % 0x10000) 
0629 753600     404            mov y+2, #low (10 / 0x10000) 
062C 753700     404            mov y+3, #high(10 / 0x10000) 
062F 1202E9     405            lcall div32 
0632            406   
0632            407            ; convert to temperature 
0632 7534A4     408            mov y+0, #low (27300 % 0x10000) 
0635 75356A     408            mov y+1, #high(27300 % 0x10000) 
0638 753600     408            mov y+2, #low (27300 / 0x10000) 
063B 753700     408            mov y+3, #high(27300 / 0x10000) 
063E 1201C8     409            lcall sub32 
0641            410   
0641 753464     411            mov y+0, #low (100 % 0x10000) 
0644 753500     411            mov y+1, #high(100 % 0x10000) 
0647 753600     411            mov y+2, #low (100 / 0x10000) 
064A 753700     411            mov y+3, #high(100 / 0x10000) 
064D 12025C     412            lcall mul32 
0650            413   
0650 1200E2     414            lcall hex2bcd 
0653            415   
0653            416   MinLogic: 
0653            417            ; do the min logic 
0653 C2D7       418            clr cy 
0655 E548       419            mov a, adc_min+1 
0657 A83A       420            mov r0, bcd+2
0659 98         421            subb a, r0 
065A 20D71E     422            jb cy, MaxLogic ; if adc_min+1 > x+1 
065D            423   
065D E547       424            mov a, adc_min+0
065F A839       425            mov r0, bcd+1
0661 98         426            subb a, r0 
0662 20D716     427            jb cy, MaxLogic
0665            428   
0665            429   SaveMin: 
0665 853947     430            mov adc_min+0, bcd+1
0668 853A48     431            mov adc_min+1, bcd+2 
066B            432   
066B 300237     433            jnb rightmenu_flag, LeftMenuTemp   
066E C0E0       434            push acc
0670 7406       434            mov a, #6
0672 14         434            dec a
0673 1200C7     434            lcall ?Set_Cursor_1 ; Select column and row
0676 D0E0       434            pop acc
0678 1203E3     435            lcall Display_formated_BCD_temperature
067B            436            
067B            437   MaxLogic: 
067B C2D7       438            clr cy 
067D E546       439            mov a, adc_max+1 
067F A83A       440            mov r0, bcd+2
0681 98         441            subb a, r0 
0682 30D720     442            jnb cy, LeftMenuTemp ; if adc_min+1 > x+1 
0685 8008       443            sjmp SaveMax
0687            444   
0687 E545       445            mov a, adc_max+0
0689 A839       446            mov r0, bcd+1
068B 98         447            subb a, r0 
068C 30D716     448            jnb cy, LeftMenuTemp 
068F            449   
068F            450   SaveMax: 
068F 853945     451            mov adc_max+0, bcd+1
0692 853A46     452            mov adc_max+1, bcd+2 
0695            453   
0695 30020D     454            jnb rightmenu_flag, LeftMenuTemp   
0698 C0E0       455            push acc
069A 7406       455            mov a, #6
069C 14         455            dec a
069D 1200C5     455            lcall ?Set_Cursor_2 ; Select column and row
06A0 D0E0       455            pop acc
06A2 1203E3     456            lcall Display_formated_BCD_temperature
06A5            457   
06A5            458   LeftMenuTemp: 
06A5 30010D     459            jnb leftmenu_flag, SerialSend 
06A8 C0E0       460            push acc
06AA 7401       460            mov a, #1
06AC 14         460            dec a
06AD 1200C5     460            lcall ?Set_Cursor_2 ; Select column and row
06B0 D0E0       460            pop acc
06B2 1203E3     461            lcall Display_formated_BCD_temperature
06B5            462   
06B5            463   SerialSend: 
06B5 E53A       464       mov a, bcd+2
06B7 C4         465            swap a 
06B8 540F       466       anl a, #0x0F
06BA 4430       467            orl a, #0x30
06BC 1203FF     468       lcall putchar
06BF            469            
06BF E53A       470            mov a, bcd+2
06C1 540F       471       anl a, #0x0F
06C3 4430       472            orl a, #0x30
06C5 1203FF     473       lcall putchar
06C8            474   
06C8 742E       475            mov a, #'.'  
06CA 1203FF     476       lcall putchar
06CD            477   
06CD E539       478            mov a, bcd+1
06CF C4         479            swap a 
06D0 540F       480       anl a, #0x0F
06D2 4430       481            orl a, #0x30
06D4 1203FF     482       lcall putchar
06D7            483   
06D7 E539       484       mov a, bcd+1
06D9 540F       485       anl a, #0x0F
06DB 4430       486            orl a, #0x30
06DD 1203FF     487       lcall putchar
06E0            488   
06E0 900748     489            mov DPTR, #newline
06E3 120407     490            lcall SendString 
06E6            491            
06E6            492   Alarm_LED: 
06E6            493   
06E6 C2D7       494            clr cy
06E8 E53A       495            mov a, bcd+2 
06EA 9430       496            subb a, #0x30
06EC 4005       497            jc noLED 
06EE            498   
06EE 12071A     499            lcall LEDflash
06F1 8002       500            sjmp return  
06F3            501   
06F3            502   noLED: 
06F3 C297       503            clr LED_out 
06F5            504   
06F5            505   return: 
06F5 020575     506            ljmp Main_loop
06F8            507   
06F8            508   alarm_beep: 
06F8 7A46       509            mov r2, #70
06FA            510   
06FA D2CA       511       setb TR2 
06FC 1203DD     512            lcall waitms 
06FF C2CA       513       clr TR2 
0701 1203DD     514            lcall waitms 
0704            515   
0704 D2CA       516       setb TR2
0706 1203DD     517       lcall waitms 
0709 C2CA       518       clr TR2 
070B C002       519            push AR2
070D 7A46       519            mov R2, #70
070F 120038     519            lcall ?Wait_Milli_Seconds
0712 D002       519            pop AR2 
0714 1203DD     520            lcall waitms 
0717            521   
0717 C2CA       522       clr TR2 
0719 22         523            ret 
071A            524   
071A            525   LEDflash: 
071A D297       526            setb LED_out 
071C 22         527            ret 
071D            528   
071D            529   
071D            530   
071D            531   ;                     1234567890123456    <- This helps determine the location of the counter
071D 20202020   532   HomePage1:        db '      Home      ', 0
     2020486F
     6D652020
     20202020
     00
072E 30312D32   533   HomePage2:        db '01-28-25', 0 
     382D3235
     00
0737 54656D70   534   Temperature:      db 'Temp in Celsius ', 0
     20696E20
     43656C73
     69757320
     00
0748 0D0A00     535   newline:          db '\r', '\n', 0
074B 3C2D00     536   leftarrow:        db '<-', 0
074E 2D3E00     537   rightarrow:       db '->', 0
0751 20202020   538   Empty:            db '                ',0
     20202020
     20202020
     20202020
     00
0762 4D696E3A   539   Min:              db 'Min: ',0
     2000
0768 4D61783A   540   Max:              db 'Max: ',0
     2000
076E            541   
076E            542   END
